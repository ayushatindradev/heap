#include <iostream>
#include <unordered_map>
#include <string>
#include <vector>
#include <algorithm>
#include <cctype>
#include <map>
using namespace std;
int main()
{
    // Q: Insert {1, "One"} into a hashmap and print it.
    // // unordered_map<int,string> mp;
    // // mp[1]="One";
    // // cout<<mp[1]<<" ";
    // 2. Check If a Key Exists
    // unordered_map<int,string> mp={{1,"one"}};
    // if(mp.find(2)!=mp.end()){
    //     cout<<"Key 2 exists in the map."<<endl;
    // }
    // else{
    //     cout<<"key is not exits";
    // }
    // 3. Iterate Over a HashMap
    // unordered_map<int,string> mp={{1,"one"},{2,"two"}};
    // for(auto i:mp){
    //     cout<<i.first<<" : "<<i.second<<endl;
    // }
    // 4. Count Frequency of Elements
    // int arr[]={1,2,3,4,5,6,7};
    // unordered_map<int,int> freq;
    // for(int num: arr){
    //     freq[num]++;
    // }
    // for(auto i:freq){
    //     cout<<i.first<<" : "<<i.second<<endl;
    // }
    // // 5. Remove an Element
    // unordered_map<int,string> mp={{1,"one"},{2,"two"},{3,"three"}};
    // mp.erase(2);
    // for(auto it:mp){
    //     cout<<it.first<<" : "<<it.second<<endl;
    // }
    // 6. Find Size of HashMap
    // unordered_map<int,string> mp={{1,"one"},{2,"two"},{3,"three};
    // cout<<"size of the hash map: "<<mp.size()<<endl;
    // 7. Check If HashMap is Empty
    // unordered_map<int,string> mp={{1,"one"},{2,"two"},{3,"three"}};
    // if(mp.empty()){
    //     cout<<"Hashmap is empty."<<endl;
    // }
    // else{
    //     cout<<"hash map is not empty"<<endl;
    // }
    // 8. Access an Absent Key
    // unordered_map<int , string> mp;
    // cout<<"Value :"<<mp[5];

    // 1. Create an Empty HashMap
    //     unordered_map<int, string> mp;
    //     2. Insert a Key-Value Pair
    // unaordered_map<int, string> mp;
    //     mp[1] = "One";
    //     3. Get Value of a Key
    // unordered_map<int,int> mp;
    // mp[2]=20;
    // cout<<mp[2];
    // 4. Check if a Key Exists
    // unordered_map<int,int>mp;
    // mp[3]=30;
    // if(mp.find(3)!= mp.end()){
    //     cout<<"Key exists";
    // }
    // else{
    //     cout<<"Key does not exist";
    // }
    // 5. Print All Elements
    // unordered_map<int,int> mp={{0,0},{1,1},{2,2},{3,3}};
    // for(auto i: mp){
    //     cout<<i.first<<" : "<<i.second<<endl;
    // }
    // 6. Remove a Key
    // unorderd_map<int,int> mp={{0,0},{1,1},{2,2},};
    // mp.erase(1);
    // 7. Find Size of HashMap
    // unordered_map<int,int> mp={{0,0},{1,1}};
    // cout<<mp.size()<<endl;
    // 8. Check if HashMap is Empty
    // 9. Default Value of Absent Key
    // unordered_map<int,int>mp={{0,0},{1,1}};
    // 11. Count Frequency of Numbers
    // int arr[]={1,2,2,2,3,3,3};
    // unordered_map<int,int> fref;
    // for(auto i:arr){
    //     freq[i]++;
    // }
    // for(auto i:fref){
    //     cout<<i.first<<" : "<<i.second<<endl;
    // }
    // 12. Find if a Number Appears More Than Once
    // int arr[]={1,2,3,2};
    // unordered_map<int,int> freq;
    // for(auto i:arr){
    //     freq[i]++;
    // }
    // for(auto i:freq){
    //     if(i.second>1){
    //         cout<<i.first<<" appears more than once."<<endl;
    //     }
    // }
    // 1. Create an Empty HashMap
    // unordered_map<int,int> mp;
    // 2. Insert One Key-Value Pair
    // unordered_map<int,int> mp;
    // mp[2]=40;
    // 4. Insert Multiple Key-Value Pairs
    // unordered_map<int,int> mp={{1,2},{3,4}};
    // 5. Print One Key-Value Pair
    // unorderd_map<int,int> mp={{1,2},{3,4}};}
    // cout<<mp.begin()->first<<" "<<mp.begin()->second<<endl;
    // 6. Remove a Key
    // unordered_map<int,int> mp={{1,2},{3,4}};
    // mp.erase(1);
    // 7. Check if a Key Exists
    // unordered_map<int,int> mp={{1,2},{3,4}};
    // if(mp.count(1)){
    //     cout<<"Exist"<<endl;
    // }
    // else{
    //     cout<<"Dost not exits";
    // }
    // 8. Check if HashMap is Empty
    // unordered_map<int,int> mp={{1,10},{2,20}};
    // cout<<mp.size();
    // 10. Access an Absent Key
    // unordered_map<int,int> mp;
    // cout<<mp[4];

    // 1. Create an Empty HashMap
    // unordered_map<int,int> mp;
    // 2. Insert a Single Key-Value Pair
    // unordered_map<int,int> mp;
    // mp[1]=10;
    // 3. Insert Another Key-Value Pair
    // unordered_map<int,int> mp;;
    // mp[2]=2;
    // 4. Insert Key-Value Using insert()
    // cpp
    // Copy
    // Edit
    // unordered_map<int,int> mp;
    // mp.insert({3,30});
    // 5. Print a Keyâ€™s Value
    // unordered_map<int,int> mp={{4,40}};
    // cout<<mp[4];
    // 6. Check if a Key Exists
    // unordered_map<int,int> mp={{5,50}};
    // if(mp.count(5)){
    //     cout<<"Key exists";
    // }
    // else{
    //     cout<<"Key does not exist";
    // }
    // 7. Remove a Key
    // unordered_map<int,int> mp={{6,50}};
    // mp.erase(6);
    // 8. Print Size of HashMap
    // unordered_map<int,int> mp={{7,70},{8,80}};
    // cout<<mp.size();
    // // 9. Check if HashMap is Empty
    // unordered_map<int,int> mp;
    // if(mp.empty()){
    //     cout<<"HashMap is empty";
    // }
    // else{
    //     cout<<"HashMap is not empty";
    // }
    // 10. Access a Key That Doesn't Exist
    // unordered_map<int,int> mp;
    // cout<<mp[9];

    // // }
    // // 11. Insert Multiple Values at Once
    // // unordered_map<int,int> mp={{10,100},{11,110}};
    // // 12. Print First Key-Value Pair
    // unordered_map<int,int> mp={{10,100},{11,110}};
    // cout<<mp.begin()->first<<" "<<mp.begin()->second<<endl;
    // 13. Iterate and Print All Pairs
    // unordered_map<int,int> mp={{10,100},{11,110}};
    // for(auto it: mp){
    //     cout<<it.first<<" "<<it.second<<endl;
    // }
    // 14. Modify a Value
    // unordered_map<int,int> mp={{15,150}};
    // mp[15]=200;
    // 15. Clear HashMap
    // // unordered_map<int,int> mp={{16,160}};
    // // mp.clear();
    // 16. Store String Keys
    // unordered_map<string,int> mp;
    // mp["apple"]=1;
    // cout<<mp["apple"]<<endl;
    // 17. Store Char Keys
    // unordered_map<char,int> mp;
    // mp['a']=5;
    // cout<<mp['a'];
    // 18. Print Only Keys

    // unordered_map<int,int> mo={{17,170},{18,180}};
    // for(auto it: mp){
    //     cout<<it.first<<endl;
    // }
    // 19. Print Only Values
    // unordered_map<int,int> mp={{19,190},{20,200}};
    // for(auto it:mp){
    //     cout<<it.second<<endl;
    // }
    // 20. Find Sum of All Values
    // unorderd_map<int,int> mp={{21,210},{22,220}};
    // int sum=0;
    // for(auto it:mp){
    //     sum = sum+it.second;
    // }
    // cout<<sum;
    // 21-40 (More Simple Variations)
    // 21. Check if key is present
    // if(mp.find(23)!=mp.end()){
    //     cout<<"Yes";
    // }
    // else{
    //     cout<<"No";
    // }
    // 22. Find Key with Maximum Value
    // int maxKey= 0,maxVal=0;
    // for(auto it:mp){
    //     if(it.second> maxVal){
    //         maxKey=it.first;
    //         maxVal=it.second;
    //     }
    // }

    // // 23. Insert a Floating Point Value (unordered_map<int, double>)

    // unorderd_map<int,double> mp;
    // mp[1]=1.5;
    // 24. Create a Map with 100 elements (loop)
    // unorderd_map<int,double> mp;
    // for(int i=1;i<100;i++){
    //     mp[i]=
    // }
    // unordered_map<int,int> mp;
    // unordered_map<int ,int> mp;
    // mp[2]=20;
    // cout<<mp[2];
    // unordered_map<int,int> mp;
    // mp[3]=30;
    // mp[4]=40;
    // unordered_map<int,int> mp={{6,10}};
    // if(mp.count(6)){
    //     cout<<"Exists";
    // }
    // else{
    //     cout<<"Not exist";
    // }
    // unordered_map<int,int> mp={{7,70},{8,80}};
    // cout<<mp.size();
    // unoredered_map<int,int> mp;
    // cout<<(mp.empty() ?"empty":"non empty");
    // unordered_map<int,int> mp;
    // mp["apple"]=1;
    // cout<<mp["apple"];
    // unordered_map<int,int> ,mp;
    // cout<<mp[6];
    // unordered_map<int,int> mp;
    // mp[1]=10;
    // mp[2]=20;
    // cout<<mp[2];
    // mp[4]=40;
    // unordered_map<string,int> mp;
    // mp["apple"]=1;
    // mp["bannana"]=7;
    // cout<<mp["bannana"];
    // mp["orange"]=8;
    // mp[5]=50;
    // // cout<<mp[5];
    // unordered_map<string,int> mp;
    // mp["apple"]=1;
    // mp["orange"]=2;
    // mp["orange"]=2;
    // mp["orange"]=99;
    // unordered_map<string,int> mp;
    // mp["Apple"]=5;
    // mp["banana"]=7;
    // cout<<mp["banana"];
    // mp["orange"]=7;
    // mp["orange"]=009;
    unordered_map<int, int> mp;
    mp[1] = 1;
    unordered_map<char, int> mp;
    mp['A'] = 65;
    cout << 10;
    unordered_map<string, string> mp;
    unordered_map<string, string> mp;
    mp["name"] = "Ayush";
    cout << "Hello";
    unordered_map<string, string> mp;

    return 0;
}
