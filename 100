#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
#include <stack>
#include <unordered_map>
#include <map>
#include <queue>
using namespace std;
int main()
{
    // What is a Heap?
    // A heap is comeplete binary treee where the parent node sttisfy a specific property
    // ->min heap : the parent node is smaller then its childern
    // -> max heap: the parent node is bigger then its child

    // 2. Difference Between Min Heap and Max Heap?
    // Min- heap -> root node->smallest
    // parent <= childeren
    // [1,2,5,7,9]

    // Max heap-> root->largest
    // parent >= childeren
    // [9,7,5,2,1]

    // 3. Implement a Min Heap Using priority_queue in C++
    //         priority_queue<int , vector<int>,greater<int>> minHeap;
    //         minHeap.push(5);
    //         minHeap.push(3);
    //         minHeap.push(1);

    //         cout<<"Min heap top :"<<minHeap.top()<<endl;
    // 4. Implement a Max Heap Using priority_queue in C++
    // priority_queue<int> maxHeap;
    // maxHeap.push(5);
    // maxHeap.push(3);
    // maxHeap.push(1);

    // cout<<"Max heap top :"<<maxHeap.top()<<endl;

    // // 4. Delete the root from Min Heap
    // minHeap.pop();

    // 5. Insert an Element into a Min Heap (Using STL)
    // priority_queue<int> minHeap;
    // minHeap.push(5);
    // minHeap.push(3);
    // minHeap.push(1);

    // cout<<"Min heap top after insert :"<<minHeap.top()<<endl;

    // // 6. Delete the root from Max Heap
    // minHeap.pop();
    // 6. Find the Smallest Element in a Min Heap
    // priority_queue<int, vector<int>,greater<int>> minHeap;
    // minHeap.push(5);
    // minHeap.push(3);
    // minHeap.push(1);

    // cout<<"Smallest element in min heap: "<<minHeap.top()<<endl;

    // 7. Find the Largest Element in a Max Heap
    // priority_queue<int> maxHeap;
    // maxHeap.push(8);
    // maxHeap.push(5);
    // maxHeap.push(10);

    // cout<<"Largest element in max heap: "<<maxHeap.top()<<endl;

    // // 8. Delete the root from Max Heap
    // maxHeap.pop();
    // 8. Remove the Top Element of a Heap (Using STL)
    // priority_queue<int> maxHeap;
    // maxHeap.push(8);
    // maxHeap.push(5);
    // maxHeap.push(102);

    // cout<<"Max heap top after remove :"<<maxHeap.top()<<endl;
    // 9. Convert an Array into a Heap (Using make_heap)
    // vector<int> arr={4,10,3,5,1};
    // make_heap(arr.begin(), arr.end()); //convert an arry to heap

    // cout<<"Heap after make_heap: ";
    // cout<<"Largest element: "<<arr.front()<<endl;

    // 10. Sort an Array Using a Heap (Heap Sort Using STL)
    //
    // vector<int> arr={10,3,5,7,1};
    // make_heap(arr.begin(), arr.end());
    // sort_heap(arr.begin(), arr.end());
    // cout<<"sorted array: "<<endl;
    // for(int num : arr){
    //     cout<<num <<" ";
    // }
    // heap is complted binary tree with min and max heap
    // use priority _ queue for easy help help implementation in c++
    // basixs opsrattion insert delete find top element
    // sort_heap sort heap in accending order.
    // make_heap() crete a heap from array
}
