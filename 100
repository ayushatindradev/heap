#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
#include <stack>
#include <unordered_map>
#include <map>
#include <queue>
using namespace std;
int main()
{
    // What is a Heap?
    // A heap is comeplete binary treee where the parent node sttisfy a specific property
    // ->min heap : the parent node is smaller then its childern
    // -> max heap: the parent node is bigger then its child

    // 2. Difference Between Min Heap and Max Heap?
    // Min- heap -> root node->smallest
    // parent <= childeren
    // [1,2,5,7,9]

    // Max heap-> root->largest
    // parent >= childeren
    // [9,7,5,2,1]

    // 3. Implement a Min Heap Using priority_queue in C++
    //         priority_queue<int , vector<int>,greater<int>> minHeap;
    //         minHeap.push(5);
    //         minHeap.push(3);
    //         minHeap.push(1);

    //         cout<<"Min heap top :"<<minHeap.top()<<endl;
    // 4. Implement a Max Heap Using priority_queue in C++
    // priority_queue<int> maxHeap;
    // maxHeap.push(5);
    // maxHeap.push(3);
    // maxHeap.push(1);

    // cout<<"Max heap top :"<<maxHeap.top()<<endl;

    // // 4. Delete the root from Min Heap
    // minHeap.pop();

    // 5. Insert an Element into a Min Heap (Using STL)
    // priority_queue<int> minHeap;
    // minHeap.push(5);
    // minHeap.push(3);
    // minHeap.push(1);

    // cout<<"Min heap top after insert :"<<minHeap.top()<<endl;

    // // 6. Delete the root from Max Heap
    // minHeap.pop();
    // 6. Find the Smallest Element in a Min Heap
    // priority_queue<int, vector<int>,greater<int>> minHeap;
    // minHeap.push(5);
    // minHeap.push(3);
    // minHeap.push(1);

    // cout<<"Smallest element in min heap: "<<minHeap.top()<<endl;

    // 7. Find the Largest Element in a Max Heap
    // priority_queue<int> maxHeap;
    // maxHeap.push(8);
    // maxHeap.push(5);
    // maxHeap.push(10);

    // cout<<"Largest element in max heap: "<<maxHeap.top()<<endl;

    // // 8. Delete the root from Max Heap
    // maxHeap.pop();
    // 8. Remove the Top Element of a Heap (Using STL)
    // priority_queue<int> maxHeap;
    // maxHeap.push(8);
    // maxHeap.push(5);
    // maxHeap.push(102);

    // cout<<"Max heap top after remove :"<<maxHeap.top()<<endl;
    // 9. Convert an Array into a Heap (Using make_heap)
    // vector<int> arr={4,10,3,5,1};
    // make_heap(arr.begin(), arr.end()); //convert an arry to heap

    // cout<<"Heap after make_heap: ";
    // cout<<"Largest element: "<<arr.front()<<endl;

    // 10. Sort an Array Using a Heap (Heap Sort Using STL)
    //
    // vector<int> arr={10,3,5,7,1};
    // make_heap(arr.begin(), arr.end());
    // sort_heap(arr.begin(), arr.end());
    // cout<<"sorted array: "<<endl;
    // for(int num : arr){
    //     cout<<num <<" ";
    // }
    // heap is complted binary tree with min and max heap
    // use priority _ queue for easy help help implementation in c++
    // basixs opsrattion insert delete find top element
    // sort_heap sort heap in accending order.
    // make_heap() crete a heap from array
}
#include<iostream>
#include<queue>
#include<vector>
using namespace std;




class MaxHeap{
    int* arr;
    int size; // toptal elemenst in heap
    int total_size; //total size of array
    public:
    MaxHeap(int n){
       arr = new int[n];
       size =0;
       total_size = n;
    }
    // insert 
    void insert(int val){
        // if heap size is aviaable 
        if(size == total_size){
            cout<<"Heap Overflow: ";
            return;
            }
            arr[size] = val;
            int index = size;
            size++;
            // compare with its parent 
 while(index>0 && arr[index-1]/2<arr[index]){
    swap(arr[index],arr[(index-1)/2]);
    index = (index-1)/2;
    }
    cout<<arr[index]<<"Inserted into the heap. "<<endl;
    }
    // extract max
     
void print(){
    for(int i=0;i<size;i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
}
void Heapify(int index){
    int largest = index;
    int left = 2*index+1;
    int right = 2*index+2;

    if(left<size && arr[left]>arr[largest]){
        largest = left;
    }
    if(right<size && arr[right]>arr[largest]){
        largest = right;
    }
    if(largest!=index){
        swap(arr[index],arr[largest]);
        Heapify(largest);
    }
}

void delete1(){

if(size==0){
    cout<<"Heap Underflow: ";
    return;
}
cout<<arr[0]<<" deleted from the heap"<<endl;
arr[0]=arr[size-1];
size--;
int index = 0;
if(size==0){
    return;
}

Heapify(0);
          


};



int main(){
    // MaxHeap h1(6);
    // h1.insert(2);
    // h1.insert(4);
    // h1.insert(6);
    // h1.insert(7);
    // h1.insert(10);
    // h1.print();
    // h1.delete1();
    // h1.print();
    // 1. Create a Max Heap using priority_queue

    // priority_queue<int> maxHeap;
    // maxHeap.push(10);
    // maxHeap.push(20);
    // maxHeap.push(30);
    // maxHeap.push(15);

    // cout<<"Top elemenst of heap :"<<maxHeap.top()<<endl;

// // 2. Create a Min Heap using priority_queue
// priority_queue<int,vector<int>,greater<int>> minheap;
// minheap.push(10);
// minheap.push(20);
// minheap.push(30);
// minheap.push(15);

// cout<<"Top elemenst of heap :"<<minheap.top()<<endl;

// 3. Implement a Max Heap using priority_queue in C++ 
// 3. Insert and Delete in Max Heap
// priority_queue<int> maxHeap;
// maxHeap.push(10);
// maxheap.push(15);
// maxHeap.push(20);
// maxHeap.push(6);

// cout<<"Top elemenst of heap :"<<maxHeap.top()<<endl;

// maxHeap.pop();
// 3. Insert and Delete in Max Heap
// priority_queue<int> maxHeap;
// maxHeap.push(10);
// maxHeap.push(15);
// maxHeap.push(20);
// maxHeap.push(6);
// cout<<"before deletion "<<maxHeap.top()<<endl;
// maxHeap.pop();
// cout<<"after deletion "<<maxHeap.top()<<endl;

// 4. Implement a Min Heap using priority_queue in C++ 

// 5. Insert and Delete in Min Heap
// 4. Check if a Heap is Empty
// priority_queue<int> maxheap;
// maxheap.push(10);
// maxheap.push(20);
// maxheap.push(30);
// while(!maxheap.empty()){
//     maxHeap.pop();
// }
// cout<<"Max Heap is "<<maxHeap.top()<<endl;
// 5. Find the Largest Element in an Array using Max Heap
// vector<int> arr={12,3,17,9,15};
// priority_queue<int> maxheap;
// for(int i=0;i<arr.size();i++){
//     maxheap.push(arr[i]);
// }
// cout<<"Largest element in array: "<<maxheap.top()<<endl;

// return 0;
// 6. Find the Smallest Element in an Array using Min Heap
// vector<int> arr={10,20,5,15};
// priority_queue<int,vector<int>,greater<int>> minHeap;
// for(int i=0;i<arr.size();i++){
//     minheap.push(arr[i]);
// }
// cout<<"Smallest element in array: "<<minHeap.top()<<endl;

// 7. Find the Second Largest Element
// vector<int> arr={7,10,4,3,20,15};
// priority_queue<int> maxHeap;
// for(int i=0;i<arr.size();i++){
//     maxHeap.push(arr[i]);
// }
// maxHeap.pop();
// cout<<"second largest elemenet is :"<<maxHeap.top();
// return 0;

// vector<int> arr={5,8,1,3,10};
// vector<int,vector<int>,greater<int> > minHeap;
// for(int i=0;i<arr.size();i++){
//     minHeap.push(arr[i]);
// }
// minHeap.pop();
// cout<<"Second smallest elemenet is :"<<minHeap.top();
// // 9. Sort an Array using Heap (Heap Sort)
// vector<int> arr={4,1,7,3,8,5};
// priority_queue<int, vector<int> ,greater<int>> minHeap;
// for(int i=0;i<arr.size();i++){
//     minHeap.push(arr[i]);
// }
// while(!minHeap.empty()){
//     cout<<minHeap.top()<<endl;
//     minHeap.pop();
// }
// vector<int> arr{7,10,4,3,20,15};
// int k = 3;
// priority_queue<int> maxHeap;
// for(int i=0;i<arr.size();i++){
//     maxHeap.push(arr[i]);
// }
// for(int i=0;i<k;i++){
//     maxHeap.pop()
// }
// cout<<"Kth largest element :"<<maxHeap.top()<<endl;

// What is a heap?
// A heap is a binary tree where the parent node is always greater than or equal to its child nodes.
// What are the two types of heaps?
// Maxheap and minheap
// How does a max heap work?
// The root node is the maximum value in a max heap.
// How does a min heap work?
// The root node is the minimum value in a min heap.
// Create an empty max heap using priority_queue in C++.
// priority_queue<int> maxHeap;
// Create an empty min heap using priority_queue in C++.
// priority_queue<int,vector<int>,greater<int>> minHeap;

// Insert one number (10) into a max heap.
// priority_queue<int> maxHeap;
// maxHeap.push(10);
// Insert one number (5) into a min heap.
// priority_queue<int,vector<int>,greater<int>> minHeap;
// minHeap.push(5);
// // Insert three numbers (10, 20, 30) into a max heap.
// priority_queue<int> maxHeap;
// maxHeap.push(10);
// maxHeap.push(20);
// maxHeap.push(30);
// Insert three numbers (15, 5, 25) into a min heap.
// priority_queue<int,greater<int>> minHeap;
// minHeap.push(15);
// minHeap.push(5);
// minHeap.push(15);

// Print the top element of a max heap after inserting {10, 20, 5}.
// cout<<maxHeap.top();
// Print the top element of a min heap after inserting {10, 20, 5}.
// cout<<minHeap.top();
// Remove the top element from a max heap after inserting {50, 30, 40}.
// maxHeap.pop();

// Remove the top element from a min heap after inserting {50, 30, 40}.
// minHeap.pop();
// Check if a heap is empty.
// if(!maxHeap.empty()){
//     cout<<"Max heap is not empty";
// }Find the size of a heap after inserting {5, 10, 15}.
// cout<<maxHEap.size();
// Convert an array {4, 7, 3, 9, 1} into a max heap.
// vector<int> arr={4,7,3,9,1};
// priority_queue<int> maxHeap(arr.begin(),arr.end());
// Convert an array {8, 2, 5, 1, 10} into a min heap.
// vector<int> arr={8,2,5,1,10};
// // priority_queue<int,vector<int> ,greater<int> > minHeap(arr.begin(),arr.end());
// while(!maxheap.empty()){
//     cout<<maxheap.top()<<endl;
//     maxheap.pop();
// }
// Insert elements into a min heap, then pop them all one by one and print them.
// while(!minHEap.empty()){
//     cout<<minHeap.top()<<endl;
//     minHeap.pop();
// }
What is a heap in simple words?
A heap is a special type of binary tree where the parent node is always greater than or equal to its child nodes.
What is a max heap?
A max heap is a binary tree where the parent node is always greater than or equal to its child nodes.
What is a min heap?
A min heap is a binary tree where the parent node is always less than or equal to its child nodes.
Which element is always at the top of a max heap?
The maximum value in a max heap.
Which element is always at the top of a min heap?
The minimum value in a min heap.
What is the difference between a heap and an array?
A heap is a data structure that implements a complete binary tree, while an array is a linear data structure that stores elements in contiguous memory locations.
Does a heap always store elements in sorted order?
No, a heap does not always store elements in sorted order.
Can a heap have duplicate values?
Yes, a heap can have duplicate values.
How do you insert an element into a heap?
You can insert an element into a heap by adding it to the end of the array and then swapping it with its parent until it is in the correct position.
How do you remove an element from a heap?
You can remove an element from a heap by replacing it with the last element in the array, then swapping it with its child node with the larger child (if it exists) until it is in the correct position.

Create an empty max heap in C++.
priority_queue<int> maxHeap;
Create an empty min heap in C++.
priority_queue<int,vector<int>,greater<int>> minHeap;
Insert the number 5 into a max heap.
maxheap.push_back(5);
Insert the number 10 into a min heap.
minHeap.push(10);
Check if a heap is empty or not.

if(maxheap.empty()){
    cout<<"Max heap is empty";
}
Find the size of a heap after inserting {5, 10, 15}.
cout<<maxHeap.size();
Print the top element of a max heap after inserting {10, 20, 5}.
cout<<maxHeap.top();
Print the top element of a min heap after inserting {10, 20, 5}.
cout<<minHeap.top();
Remove the top element from a max heap.
maxHeap.pop();
Remove the top element from a min heap.
minHeap.pop();
Basic Heap Operations (10 Questions)
// Insert 3 numbers (10, 20, 30) into a max heap and print the top.
// cpp
// Copy
// Edit
// maxHeap.push(10);
// maxHeap.push(20);
// maxHeap.push(30);
// cout<<maxHeap.top();
// Insert 3 numbers (15, 5, 25) into a min heap and print the top.
// cpp
// Copy
// Edit
// minHeap.push(15);
// minHeap.push(5);
// minHeap.push(25);
// cout<<minHeap.top();
// Remove the top element from a max heap with {50, 30, 40}.
// maxheap.pop();
// Remove the top element from a min heap with {50, 30, 40}.
// minHeap.pop();
// Convert an array {4, 7, 3, 9, 1} into a max heap.
// vector<int> arr={4,7,3,9,1};
// priority_queue<int> maxHeap(arr.begin(),arr.end());
// Convert an array {8, 2, 5, 1, 10} into a min heap.
// vector<int> arr={4,7,3,9,1};
// prority_queue<int,vector<int>,greater<int>> minHEap(arr.begin(),arr.end());
// Insert elements into a max heap, then pop them all one by one and print.
// while(!maxHeap,empty()){
//     cout<<maxHeap.top()<<" ";
//     maxHeap.pop();    
// }
// Insert elements into a min heap, then pop them all one by one and print.
// while(!maxHeap.empty()){
//     cout<<maxHeap.top()<<" ";
//     MaxHeap.pop();
// }
// Insert {10, 15, 5, 20} into a max heap and remove the top element.
// maxHeap.push(10);
// maxHeap.push(15);
// maxHeap.push(5);
// maxHeap.push(20);
// maxHeap.pop();
// Insert {2, 4, 1, 3} into a min heap and remove the top element.
// minHeap.push(2);
// minHeap.push(4);
// minHeap.push(1);
// Heap Applications (10 Questions)
vector<int> arr={10,15,7,30,25};
prority_queue<int> maxHeap(arr.begin(),arr.end());
cout<<maxHeap.top()<<endl;
Find the smallest element in {10, 15, 7, 30, 25} using a min heap.
vector<int> arr={10,15,7,30,25};
priority_queue<int,vector<int>,greater<int>> minHeap(arr.begin(),arr.end());
cout<<minHeap.top()<<endl;

Find the second largest element in {10, 15, 7, 30, 25} using a max heap.
maxHeap.pop();
cout<<maxHeap.top()<<endl;
Find the second smallest element in {10, 15, 7, 30, 25} using a min heap.
minHeap.pop();
cout<<minHeap.top();


Find the 3rd largest element in {5, 2, 9, 1, 10}.
maxheap.pop();
maxHeap.pop();
maxHeap.pop();
Sort {5, 1, 8, 3} in ascending order using a min heap.

while(!minHeap.empty()){
    cout<<minHeap.top()<<" ";
    minHeap.pop();
}
Sort {5, 1, 8, 3} in descending order using a max heap.
while(!maxheap.empty()){
    cout<<maxHeap.top()<<" ";
    maxHeap.pop();
}

// Merge two sorted arrays {1, 4, 7} and {2, 5, 8} using a heap.
vector<int> arr1={1,4,7}; vector<int> arr2={2,5,8};
priority_queue<int> maxHeap;
for(int i:arr1){
    maxHeap.push(i);
}
for(int i:arr2){
    maxHeap.push(i);
}
while(!maxHeap.empty()){
    cout<<maxHeap.top()<<" ";
    maxHeap.pop();
}
Find the Kth largest element in {4, 3, 2, 1, 5, 6}.
priority_queue<int,vector<int>,greater<int>> maxHeap;
for(int i:arr){
    maxHeap.push(i);
}
int k=3;
for(int i=1;i<k;i++){
    maxHeap.pop();
}
cout<<maxHeap.top();
 }

























return 0;
}
